# @package _global_

# to execute this experiment run:
# python train.py experiment=example

defaults:
  - /datamodule: uniref50
  - /callbacks: lm
  - /trainer: ddp_bf16

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

# name of the run determines folder name in logs
project: "pLM_150m"
name: "pLM_150m"

datamodule:
  _target_: mixed
  num_workers: 8
  pin_memory: true
  mini_run: false
  mix_probabilities: [0.8, 0.2]
  seed: null
  streaming: true
  min_entropy_cutoff: null
  max_tokens: 6000
  max_len: 1022
  max_num_reps: null
  max_rep_subseq_len: null


model:
  _target_: pLM

  lora:
    lora: false
    lora_rank: 16
    lora_dropout: 0.1
    lora_target_module: (esm.encoder.layer.[0-9]*.attention.(self.query|self.key|self.value|output.dense).*|esm.encoder.layer.[0-9]*.(intermediate|output).dense.*)
    modules_to_save: lm_head,esm.embeddings
  net:
    arch_type: esm
    name: facebook/esm2_t30_150M_UR50D
    dropout: 0.1
    pretrain: true
    pretrained_model_name_or_path: facebook/esm2_t30_150M_UR50D

task:
  _target_: lm/pLM
  optimizer:
    type: adamw
    _partial_: true
    lr: ${train.lr}
    betas: 
      - 0.9
      - 0.98
    weight_decay: 0.01 # 0.0001
  lr_scheduler:
    type: polynomial
    warmup_steps: 2000
    total_steps: ${trainer.max_steps}
    lr: ${train.lr}
    lr_end: 1e-5
    warmup_init_lr: 1e-07
    power: 1

train:
  seed: 42
  lr: 0.00004
  monitor: "val/loss"
  mode: "min"
  patience: 1000

trainer:
  min_epochs: 10
  max_epochs: 10000
  gradient_clip_val: 1.0
  # val_check_interval: 10
  num_sanity_val_steps: 0
  reload_dataloaders_every_n_epochs: 1
  use_distributed_sampler: false
  max_steps: 100_000
  accumulate_grad_batches: 1
  check_val_every_n_epoch: null
  val_check_interval: 1000
  enable_progress_bar: true
  num_nodes: 1